// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Course, User, Lecture, Comment } from "./prisma-client";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsCourse {
    id: string;
  }

  export interface ArgsLecture {
    courseId: string;
    lectureId: string;
  }

  export type CoursesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course[] | Promise<Course[]>;

  export type CourseResolver = (
    parent: undefined,
    args: ArgsCourse,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course | null | Promise<Course | null>;

  export type LectureResolver = (
    parent: undefined,
    args: ArgsLecture,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Lecture | null | Promise<Lecture | null>;

  export interface Type {
    courses: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course[] | Promise<Course[]>;

    course: (
      parent: undefined,
      args: ArgsCourse,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course | null | Promise<Course | null>;

    lecture: (
      parent: undefined,
      args: ArgsLecture,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Lecture | null | Promise<Lecture | null>;
  }
}

export namespace CourseResolvers {
  export const defaultResolvers = {
    id: (parent: Course) => parent.id,
    name: (parent: Course) => parent.name
  };

  export type IdResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OwnerResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type LecturesResolver = (
    parent: Course,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Lecture[] | Promise<Lecture[]>;

  export interface Type {
    id: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    owner: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    lectures: (
      parent: Course,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Lecture[] | Promise<Lecture[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    avatar: (parent: User) => parent.avatar
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AvatarResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CoursesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course[] | Promise<Course[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    avatar: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    courses: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course[] | Promise<Course[]>;
  }
}

export namespace LectureResolvers {
  export const defaultResolvers = {
    id: (parent: Lecture) => parent.id,
    title: (parent: Lecture) => parent.title,
    content: (parent: Lecture) => parent.content
  };

  export type IdResolver = (
    parent: Lecture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: Lecture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContentResolver = (
    parent: Lecture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CourseResolver = (
    parent: Lecture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course | Promise<Course>;

  export type CommentsResolver = (
    parent: Lecture,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment[] | Promise<Comment[]>;

  export interface Type {
    id: (
      parent: Lecture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    title: (
      parent: Lecture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    content: (
      parent: Lecture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    course: (
      parent: Lecture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course | Promise<Course>;

    comments: (
      parent: Lecture,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment[] | Promise<Comment[]>;
  }
}

export namespace CommentResolvers {
  export const defaultResolvers = {
    id: (parent: Comment) => parent.id,
    page: (parent: Comment) => parent.page,
    content: (parent: Comment) => parent.content
  };

  export type IdResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LectureResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Lecture | Promise<Lecture>;

  export type UserResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type PageResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ContentResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lecture: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Lecture | Promise<Lecture>;

    user: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    page: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    content: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateCourse {
    name: string;
  }

  export interface ArgsCreateLecture {
    courseId: string;
    title: string;
    content: string;
  }

  export interface ArgsCreateComment {
    lectureId: string;
    content: string;
  }

  export type CreateCourseResolver = (
    parent: undefined,
    args: ArgsCreateCourse,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Course | null | Promise<Course | null>;

  export type CreateLectureResolver = (
    parent: undefined,
    args: ArgsCreateLecture,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Lecture | null | Promise<Lecture | null>;

  export type CreateCommentResolver = (
    parent: undefined,
    args: ArgsCreateComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export interface Type {
    createCourse: (
      parent: undefined,
      args: ArgsCreateCourse,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Course | null | Promise<Course | null>;

    createLecture: (
      parent: undefined,
      args: ArgsCreateLecture,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Lecture | null | Promise<Lecture | null>;

    createComment: (
      parent: undefined,
      args: ArgsCreateComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface ArgsCommentAdded {
    lectureId: string;
  }

  export type CommentAddedResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsCommentAdded,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<Comment | null> | Promise<AsyncIterator<Comment | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsCommentAdded,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;
  };

  export interface Type {
    commentAdded: {
      subscribe: (
        parent: undefined,
        args: ArgsCommentAdded,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<Comment | null>
        | Promise<AsyncIterator<Comment | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsCommentAdded,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Comment | null | Promise<Comment | null>;
    };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Course: CourseResolvers.Type;
  User: UserResolvers.Type;
  Lecture: LectureResolvers.Type;
  Comment: CommentResolvers.Type;
  Mutation: MutationResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
}
