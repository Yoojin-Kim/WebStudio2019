// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateLecture {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  lecture: Lecture!
  user: User!
  page: Int!
  content: String!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  lecture: LectureCreateOneWithoutCommentsInput!
  user: UserCreateOneInput!
  page: Int!
  content: String!
}

input CommentCreateManyWithoutLectureInput {
  create: [CommentCreateWithoutLectureInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutLectureInput {
  id: ID
  user: UserCreateOneInput!
  page: Int!
  content: String!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  page_ASC
  page_DESC
  content_ASC
  content_DESC
}

type CommentPreviousValues {
  id: ID!
  page: Int!
  content: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  page: Int
  page_not: Int
  page_in: [Int!]
  page_not_in: [Int!]
  page_lt: Int
  page_lte: Int
  page_gt: Int
  page_gte: Int
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  lecture: LectureUpdateOneRequiredWithoutCommentsInput
  user: UserUpdateOneRequiredInput
  page: Int
  content: String
}

input CommentUpdateManyDataInput {
  page: Int
  content: String
}

input CommentUpdateManyMutationInput {
  page: Int
  content: String
}

input CommentUpdateManyWithoutLectureInput {
  create: [CommentCreateWithoutLectureInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutLectureInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutLectureInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutLectureDataInput {
  user: UserUpdateOneRequiredInput
  page: Int
  content: String
}

input CommentUpdateWithWhereUniqueWithoutLectureInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutLectureDataInput!
}

input CommentUpsertWithWhereUniqueWithoutLectureInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutLectureDataInput!
  create: CommentCreateWithoutLectureInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lecture: LectureWhereInput
  user: UserWhereInput
  page: Int
  page_not: Int
  page_in: [Int!]
  page_not_in: [Int!]
  page_lt: Int
  page_lte: Int
  page_gt: Int
  page_gte: Int
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  name: String!
  owner: User!
  lectures(where: LectureWhereInput, orderBy: LectureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lecture!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutCoursesInput!
  lectures: LectureCreateManyWithoutCourseInput
}

input CourseCreateManyWithoutOwnerInput {
  create: [CourseCreateWithoutOwnerInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutLecturesInput {
  create: CourseCreateWithoutLecturesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutLecturesInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutCoursesInput!
}

input CourseCreateWithoutOwnerInput {
  id: ID
  name: String!
  lectures: LectureCreateManyWithoutCourseInput
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  name: String
  owner: UserUpdateOneRequiredWithoutCoursesInput
  lectures: LectureUpdateManyWithoutCourseInput
}

input CourseUpdateManyDataInput {
  name: String
}

input CourseUpdateManyMutationInput {
  name: String
}

input CourseUpdateManyWithoutOwnerInput {
  create: [CourseCreateWithoutOwnerInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateOneRequiredWithoutLecturesInput {
  create: CourseCreateWithoutLecturesInput
  update: CourseUpdateWithoutLecturesDataInput
  upsert: CourseUpsertWithoutLecturesInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutLecturesDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateWithoutOwnerDataInput {
  name: String
  lectures: LectureUpdateManyWithoutCourseInput
}

input CourseUpdateWithWhereUniqueWithoutOwnerInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutOwnerDataInput!
}

input CourseUpsertWithoutLecturesInput {
  update: CourseUpdateWithoutLecturesDataInput!
  create: CourseCreateWithoutLecturesInput!
}

input CourseUpsertWithWhereUniqueWithoutOwnerInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutOwnerDataInput!
  create: CourseCreateWithoutOwnerInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  owner: UserWhereInput
  lectures_every: LectureWhereInput
  lectures_some: LectureWhereInput
  lectures_none: LectureWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Lecture {
  id: ID!
  title: String!
  content: String!
  course: Course!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type LectureConnection {
  pageInfo: PageInfo!
  edges: [LectureEdge]!
  aggregate: AggregateLecture!
}

input LectureCreateInput {
  id: ID
  title: String!
  content: String!
  course: CourseCreateOneWithoutLecturesInput!
  comments: CommentCreateManyWithoutLectureInput
}

input LectureCreateManyWithoutCourseInput {
  create: [LectureCreateWithoutCourseInput!]
  connect: [LectureWhereUniqueInput!]
}

input LectureCreateOneWithoutCommentsInput {
  create: LectureCreateWithoutCommentsInput
  connect: LectureWhereUniqueInput
}

input LectureCreateWithoutCommentsInput {
  id: ID
  title: String!
  content: String!
  course: CourseCreateOneWithoutLecturesInput!
}

input LectureCreateWithoutCourseInput {
  id: ID
  title: String!
  content: String!
  comments: CommentCreateManyWithoutLectureInput
}

type LectureEdge {
  node: Lecture!
  cursor: String!
}

enum LectureOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type LecturePreviousValues {
  id: ID!
  title: String!
  content: String!
}

input LectureScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [LectureScalarWhereInput!]
  OR: [LectureScalarWhereInput!]
  NOT: [LectureScalarWhereInput!]
}

type LectureSubscriptionPayload {
  mutation: MutationType!
  node: Lecture
  updatedFields: [String!]
  previousValues: LecturePreviousValues
}

input LectureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LectureWhereInput
  AND: [LectureSubscriptionWhereInput!]
  OR: [LectureSubscriptionWhereInput!]
  NOT: [LectureSubscriptionWhereInput!]
}

input LectureUpdateInput {
  title: String
  content: String
  course: CourseUpdateOneRequiredWithoutLecturesInput
  comments: CommentUpdateManyWithoutLectureInput
}

input LectureUpdateManyDataInput {
  title: String
  content: String
}

input LectureUpdateManyMutationInput {
  title: String
  content: String
}

input LectureUpdateManyWithoutCourseInput {
  create: [LectureCreateWithoutCourseInput!]
  delete: [LectureWhereUniqueInput!]
  connect: [LectureWhereUniqueInput!]
  set: [LectureWhereUniqueInput!]
  disconnect: [LectureWhereUniqueInput!]
  update: [LectureUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [LectureUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [LectureScalarWhereInput!]
  updateMany: [LectureUpdateManyWithWhereNestedInput!]
}

input LectureUpdateManyWithWhereNestedInput {
  where: LectureScalarWhereInput!
  data: LectureUpdateManyDataInput!
}

input LectureUpdateOneRequiredWithoutCommentsInput {
  create: LectureCreateWithoutCommentsInput
  update: LectureUpdateWithoutCommentsDataInput
  upsert: LectureUpsertWithoutCommentsInput
  connect: LectureWhereUniqueInput
}

input LectureUpdateWithoutCommentsDataInput {
  title: String
  content: String
  course: CourseUpdateOneRequiredWithoutLecturesInput
}

input LectureUpdateWithoutCourseDataInput {
  title: String
  content: String
  comments: CommentUpdateManyWithoutLectureInput
}

input LectureUpdateWithWhereUniqueWithoutCourseInput {
  where: LectureWhereUniqueInput!
  data: LectureUpdateWithoutCourseDataInput!
}

input LectureUpsertWithoutCommentsInput {
  update: LectureUpdateWithoutCommentsDataInput!
  create: LectureCreateWithoutCommentsInput!
}

input LectureUpsertWithWhereUniqueWithoutCourseInput {
  where: LectureWhereUniqueInput!
  update: LectureUpdateWithoutCourseDataInput!
  create: LectureCreateWithoutCourseInput!
}

input LectureWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  course: CourseWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [LectureWhereInput!]
  OR: [LectureWhereInput!]
  NOT: [LectureWhereInput!]
}

input LectureWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createLecture(data: LectureCreateInput!): Lecture!
  updateLecture(data: LectureUpdateInput!, where: LectureWhereUniqueInput!): Lecture
  updateManyLectures(data: LectureUpdateManyMutationInput!, where: LectureWhereInput): BatchPayload!
  upsertLecture(where: LectureWhereUniqueInput!, create: LectureCreateInput!, update: LectureUpdateInput!): Lecture!
  deleteLecture(where: LectureWhereUniqueInput!): Lecture
  deleteManyLectures(where: LectureWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  lecture(where: LectureWhereUniqueInput!): Lecture
  lectures(where: LectureWhereInput, orderBy: LectureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lecture]!
  lecturesConnection(where: LectureWhereInput, orderBy: LectureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LectureConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  lecture(where: LectureSubscriptionWhereInput): LectureSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  avatar: String!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  avatar: String!
  courses: CourseCreateManyWithoutOwnerInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCoursesInput {
  id: ID
  name: String!
  avatar: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  avatar: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  avatar: String
  courses: CourseUpdateManyWithoutOwnerInput
}

input UserUpdateInput {
  name: String
  avatar: String
  courses: CourseUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  name: String
  avatar: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  update: UserUpdateWithoutCoursesDataInput
  upsert: UserUpsertWithoutCoursesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCoursesDataInput {
  name: String
  avatar: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCoursesInput {
  update: UserUpdateWithoutCoursesDataInput!
  create: UserCreateWithoutCoursesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`